pragma solidity ^0.4.24;
pragma experimental ABIEncoderV2;
contract TimeTrack {
    // Address to represent owner
    address public employer;
    address[] public employeeAddresses;
    Employee[] public employeeEntities;
    uint public employeeIdCount;
    uint public currentBlockTime;
    uint public totalOvertimeCount;
    uint public totalPunchInCount;
    uint public totalPunchOutCount;
    address currentMsgSender;
    Employee public currentEmployee;

    // for testing
    // because we can't make mapping(x => something complicate like struct or mapping work)
    uint[] public punchIns;
    uint[] public punchOuts;

    mapping(string => uint) companyOvertimeCnt;

    // Datastructure to represent each employee
    struct Employee {
        address employeeAddress;
        bool isActive;
        uint punchStartedDayNum;
        uint punchFinishedDayNum;
        uint overtimeCount;
        bool punchStatus; //true => IN, false => OUT
    }

    struct Card {
        uint punchIn;
        uint punchOut;
    }

    //Stores employee struct for each possible address
    mapping(address => mapping(uint => Card)) public punchHistory;
    mapping(address => Card[]) public punchCards;
    mapping(address => uint) public addrToEmployeeIdMap;

    function TimeTrack() public {
        employer = msg.sender;
        employeeIdCount = 0;
        addEmployee();
    }

    // Make employee inactive in the system
    // function removeAuthorization(address addr) public {
    //     require(msg.sender == employer);
    //     employees[addr].isActive = false;
    // }

    // add an employee given an address and name
    function addEmployee() public returns (bool _success)  {
        currentEmployee = Employee({employeeAddress: msg.sender, isActive: true, punchStartedDayNum: 1, punchFinishedDayNum: 1, overtimeCount: 1, punchStatus: false});
        addrToEmployeeIdMap[msg.sender] = employeeIdCount;
        employeeEntities.push(currentEmployee);
        employeeIdCount++;
        employeeAddresses.push(msg.sender);
        return true;
    }

    function displayPunchTime() public view returns (uint) {
     return currentBlockTime;
    }

    function breakViolationAlert() public pure returns (string) {
      return "Break Rules Violated!!!";
    }

    function doPunchIN() public returns (bool _success) {
        // require(
        //     (employer != msg.sender) &&
        //     (employees[msg.sender].isActive) &&
        //     (!employees[msg.sender].card.punchAlert)
        //     );
        currentBlockTime = now;
        currentMsgSender = msg.sender;
        totalPunchInCount++;
        uint punchStartedDayNum = employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchStartedDayNum++;
        employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchStatus = true;
        punchHistory[msg.sender][punchStartedDayNum].punchIn = currentBlockTime;
        punchIns.push(currentBlockTime);

        return true;
    }

    function doPunchOUT() public returns (bool _success) {
        // require(
        //     (employer != msg.sender) &&
        //     (employees[msg.sender].isActive) &&
        //     (employees[msg.sender].card.punchAlert)
        //     );
        currentBlockTime = now;
        currentMsgSender = msg.sender;
        totalPunchOutCount++;
        uint punchStartedDayNum = employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchStartedDayNum;
        employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchFinishedDayNum++;
        employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchStatus = false;
        punchHistory[msg.sender][punchStartedDayNum].punchOut = currentBlockTime;
        punchCards[msg.sender].push(punchHistory[msg.sender][punchStartedDayNum]);
        punchOuts.push(currentBlockTime);
        caluculateOvertime();

        return true;
    }

    // TODO: move it into doPunchOUT
    // function calculateCompanyOvertime(string name) returns (uint) {
    //     uint punchStartedDayNum = employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchStartedDayNum;
    //     uint punchOut = punchHistory[msg.sender][punchStartedDayNum].punchOut;
    //     uint punchIn = punchHistory[msg.sender][punchStartedDayNum].punchIn;
    //     require(punchOut > punchIn);
    //     uint diff = punchOut - punchIn;
    //     // 为了方便测试，将工作超时时间设置为1min
    //     if (diff > 60 * 1) {
    //         companyOvertimeCnt[name]++;
    //     }
    // }

    function caluculateOvertime() private {
        uint punchStartedDayNum = employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchStartedDayNum;
        uint punchOut = punchHistory[msg.sender][punchStartedDayNum].punchOut;
        uint punchIn = punchHistory[msg.sender][punchStartedDayNum].punchIn;
        require(punchOut > punchIn);
        uint diff = punchOut - punchIn;
        // 为了方便测试，将工作超时时间设置为1min
        if (diff > 60 * 1) {
            employeeEntities[addrToEmployeeIdMap[currentMsgSender]].overtimeCount++;
            totalOvertimeCount++;
        }
    }

    function displayMyPunchIns() public view returns(uint[]) {
        // uint punchFinishedDayNum = employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchFinishedDayNum;
        // uint[] memory punchIns = new uint[](punchFinishedDayNum);
        // for (uint i = 0; i < punchFinishedDayNum - 1; i++) {
        //     punchIns[i] = punchHistory[msg.sender][i].punchIn;
        // }
        return punchIns;
    }

    function displayMyPunchOuts() public view returns(uint[]) {
        // uint punchFinishedDayNum = employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchFinishedDayNum;
        // uint[] memory punchOuts = new uint[](punchFinishedDayNum);
        // for (uint i = 0; i < punchFinishedDayNum - 1; i++) {
        //     punchOuts[i] = punchHistory[msg.sender][i].punchOut;
        // }
        return punchOuts;
    }

    function displayTotalOvertimeCount() public view returns(uint) {
        return totalOvertimeCount;
    }

    function displayCurrentMsgSender() public view returns(address) {
        return currentMsgSender;
    }

    function displayTotalPunchInCount() public view returns(uint) {
        return totalPunchInCount;
    }

    function displayTotalPunchOutCount() public view returns(uint) {
        return totalPunchOutCount;
    }

    function getEmployees() public view returns(address[])  {
        return employeeAddresses;
    }

    function displayMyPunchStatus() public view returns (bool) {
        return employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchStatus;
    }

    function displayMyPunchDayNum() public view returns (uint) {
        return employeeEntities[addrToEmployeeIdMap[currentMsgSender]].punchStartedDayNum;
    }
    
    function displayMyOvertimeCount() public view returns (uint) {
        return employeeEntities[addrToEmployeeIdMap[currentMsgSender]].overtimeCount;
    }

    function displayMyAddr() public view returns (address) {
        return employeeEntities[addrToEmployeeIdMap[currentMsgSender]].employeeAddress;
    }
}

